"""
Django settings for majibu project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Path of the env file used in development
ENV_PATH = os.path.join(BASE_DIR, "env/.env.local").replace("\\", "/")

# Load environment variables
load_dotenv(ENV_PATH, override=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
ALLOWED_HOSTS: list[str] = ["localhost", "127.0.0.1", ".fly.dev"]

CSRF_TRUSTED_ORIGINS: list[str] = ["https://*.fly.dev"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "phonenumber_field",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "drf_spectacular",
    "django_filters",
    "django_celery_results",
    # Apps
    "users",
    "commons",
    "notifications",
    "accounts",
    "user_sessions",
    "quiz",
]

MIDDLEWARE = [
    "log_request_id.middleware.RequestIDMiddleware",  # Third party app
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Custom middleware
    "commons.middlewares.UserIsActiveMiddleware",
    "commons.middlewares.RequestResponseLoggerMiddleware",
]

ROOT_URLCONF = "majibu.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "majibu.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ["POSTGRES_DB"],
        "USER": os.environ["POSTGRES_USER"],
        "HOST": os.environ["POSTGRES_HOST"],
        "PASSWORD": os.environ["POSTGRES_PASSWORD"],
        "CONN_MAX_AGE": 300,  # 5 minutes
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Africa/Nairobi"

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static").replace("\\", "/")

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "users.User"


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.environ["REDIS_URL"],
    }
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": (
        "rest_framework_simplejwt.tokens.AccessToken",
        "users.tokens.UserRefreshToken",
    ),
    "BLACKLIST_AFTER_ROTATION": True,
    "ROTATE_REFRESH_TOKENS": True,
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_THROTTLE_RATES": {
        "authentication_throttle": "5/hour",
        "mpesa_stkpush_throttle": "3/minute",
        "mpesa_withdrawal_throttle": "1/minute",
    },
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "commons.pagination.StandardPageNumberPagination",
}

# AD IMAGE URL
AD_IMAGE_URL = os.environ.get("AD_IMAGE_URL", "https://iili.io/da9qqCP.png")
AD_REDIRECTS_TO = os.environ.get(
    "AD_REDIRECTS_TO", "https://chat.whatsapp.com/EZ8226SHwkY4REUDtb6TjL"
)

# BUSINESS HOURS
BUSINESS_OPENS_AT = os.environ.get("BUSINESS_OPENS_AT", "12:00")
BUSINESS_CLOSES_AT = os.environ.get("BUSINESS_CLOSES_AT", "19:00")
BUSINESS_IS_OPEN = bool(int(os.environ.get("BUSINESS_IS_OPEN", 1)))

# LATEST APP VERSION
LATEST_APP_VERSION = os.environ.get("LATEST_APP_VERSION", "1.0.0")

# SESSION DETAILS
QUESTIONS_IN_SESSION: int = 5
SESSION_EXITS_AT: int = 30 * 60  # In seconds
SESSION_DURATION: int = 20  # In seconds
SESSION_PAYOUT_RATIO: float = 1.8  # Ratio of what user will win
SESSION_STAKE: int = 100  # In KES

# REFUND AND WIN RATIOS
SESSION_REFUND_RATIO: float = 1.10
SESSION_PARTIAL_REFUND_RATIO: float = 1.0
SESSION_WIN_RATIO: float = 1.8

SESSION_CORRECT_ANSWERED_WEIGHT = 0.8
SESSION_TOTAL_ANSWERED_WEIGHT = 0.2

MODERATED_LOWEST_SCORE: float = 70.0
MODERATED_HIGHEST_SCORE: float = 85.0

# Celery settings
CELERY_CACHE_BACKEND = "default"
CELERY_TASK_SOFT_TIME_LIMIT = 60 * 5  # Tasks expire after 5 minutes
CELERY_BROKER_URL = os.environ["REDIS_URL"]
CELERY_ACCEPT_CONTENT = {"application/json"}
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"
CELERY_TIMEZONE = "Africa/Nairobi"

HOST_PINNACLE_USER_ID = os.environ["HOST_PINNACLE_USER_ID"]
HOST_PINNACLE_PASSWORD = os.environ["HOST_PINNACLE_PASSWORD"]
HOST_PINNACLE_SENDER_ID = os.environ["HOST_PINNACLE_SENDER_ID"]

# DRF Spectacular Settings for Swagger
SPECTACULAR_SETTINGS = {
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_SETTINGS": {
        "defaultModelsExpandDepth": -1,
        "persistAuthorization": True,
    },
    # Only authenticated users can access the schema and documentation views.
    "SERVE_PERMISSIONS": ["rest_framework.permissions.IsAdminUser"],
    "AUTHENTICATION_WHITELIST": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "SERVE_AUTHENTICATION": [
        # User can only view swagger docs if they've logged in via django admin
        "rest_framework.authentication.SessionAuthentication",
        # "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}

# One Signal
ONESIGNAL_APP_ID = os.environ["ONESIGNAL_APP_ID"]
ONESIGNAL_API_KEY = os.environ["ONESIGNAL_API_KEY"]

# M-Pesa
MPESA_BUSINESS_SHORT_CODE = os.environ["MPESA_BUSINESS_SHORT_CODE"]
MPESA_B2C_CONSUMER_KEY = os.environ["MPESA_B2C_CONSUMER_KEY"]
MPESA_B2C_SECRET = os.environ["MPESA_B2C_SECRET"]
MPESA_B2C_PASSWORD = os.environ["MPESA_B2C_PASSWORD"]
MPESA_B2C_URL = os.environ["MPESA_B2C_URL"]
MPESA_B2C_INITIATOR_NAME = os.environ["MPESA_B2C_INITIATOR_NAME"]
MPESA_B2C_SHORT_CODE = os.environ["MPESA_B2C_SHORT_CODE"]
MPESA_B2C_QUEUE_TIMEOUT_URL = os.environ["MPESA_B2C_QUEUE_TIMEOUT_URL"]
MPESA_B2C_RESULT_URL = os.environ["MPESA_B2C_RESULT_URL"]


MPESA_CALLBACK_URL = os.environ["MPESA_CALLBACK_URL"]
MPESA_CONSUMER_KEY = os.environ["MPESA_CONSUMER_KEY"]
MPESA_DATETIME_FORMAT = "%Y%m%d%H%M%S"

MPESA_PASS_KEY = os.environ["MPESA_PASS_KEY"]
MPESA_SECRET = os.environ["MPESA_SECRET"]
MPESA_STKPUSH_URL = os.environ["MPESA_STKPUSH_URL"]
MPESA_TOKEN_URL = os.environ["MPESA_TOKEN_URL"]
WITHDRAWAL_BUFFER_PERIOD = int(os.environ["WITHDRAWAL_BUFFER_PERIOD"])


# If DEV_ENV=True, the system is running in dev environment so load local settings instead
SERVER_IN_PROD = os.getenv("SERVER_IN_PROD", "0")
if bool(SERVER_IN_PROD):
    try:
        from majibu.local_settings import *  # noqa
    except Exception as e:  # noqa
        pass
else:
    # Parse database configuration from $DATABASE_URL
    import dj_database_url  # noqa

    prod_db = dj_database_url.config(conn_max_age=500)
    DATABASES["default"].update(prod_db)

    # Honor the 'X-Forwarded-Proto' header for request.is_secure()
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

    PROJECT_ROOT = Path(__file__).resolve().parent
